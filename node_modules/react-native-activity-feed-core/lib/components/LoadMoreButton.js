Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = 'src/components/LoadMoreButton.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactNative = require('react-native');

var _styles = require('../styles');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LoadMoreButton = function (_React$Component) {
  _inherits(LoadMoreButton, _React$Component);

  function LoadMoreButton() {
    _classCallCheck(this, LoadMoreButton);

    return _possibleConstructorReturn(this, (LoadMoreButton.__proto__ || Object.getPrototypeOf(LoadMoreButton)).apply(this, arguments));
  }

  _createClass(LoadMoreButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          refreshing = _props.refreshing,
          onPress = _props.onPress;


      var styles = (0, _styles.buildStylesheet)('loadMoreButton', this.props.styles);
      return React.createElement(
        _reactNative.TouchableOpacity,
        {
          style: styles.button,
          onPress: onPress,
          disabled: refreshing,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 24
          }
        },
        React.createElement(
          _reactNative.Text,
          { style: styles.buttonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          },
          children
        )
      );
    }
  }]);

  return LoadMoreButton;
}(React.Component);

LoadMoreButton.defaultProps = {
  children: 'Load more'
};
exports.default = LoadMoreButton;